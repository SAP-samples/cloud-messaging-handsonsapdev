#!/usr/bin/env bash

set -o errexit
source ./localutils.sh

# Listen to given topic:
# - create temporary queue
# - subscribe queue to the given topic
# - start the webhook endpoint
# - create a webhook subscription to the queue
# - monitor the output of the webhook endpoint

# On interrupt, clean up:
# - delete webhook subscription
# - delete queue (which will delete the queue subscription)
# - (leave the webhook endpoint running)

# Usage:
# listen <topic> <webhook app name>

# Functions ----------------------------------------------------------------------

cleanup() {
  echo
  log Cleaning up - deleting webhook subscription "$webhook_subscription"
  ./messaging delete_webhook_subscription "$webhook_subscription"

  log Cleaning up - deleting queue "$queue"
  ./management delete_queue "$queue"

  exit 0
}

# MAIN ---------------------------------------------------------------------------

if [ "$#" -ne 2 ]; then
    echo "Usage: listen <topic> <webhook app name>"
    exit 1
fi

topic=$1
if [[ -z "$topic" ]]; then
  echo Specify topic
  exit 1
fi

# Names for temporary queue and webhook subscription,
# plus details of webhook app in the cloud.
epoch=$(date "+%s")
queue="queue-$epoch"
webhook_app=$2
webhook_url="https://$(cf app "$webhook_app" | awk '/^routes:/ { print $2 }')"
webhook_subscription="whs-$epoch"

log Creating queue "$queue"
./management create_update_queue "$queue"

log Subscribing queue "$queue" to topic "$topic"
./management create_update_queue_subscription "$queue" "$topic"

log Attaching webhook subscription to app "$webhook_app" for queue "$queue"
./messaging create_webhook_subscription "$webhook_subscription" "$queue" "$webhook_url"

log Monitoring messages received at the webhook app "$webhook_app" ...
trap cleanup SIGINT
cf start "$webhook_app"
cf logs "$webhook_app" | grep '☞'
